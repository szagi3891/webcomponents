zmienne klorystyczne jako zmienne cssowe. Podczepione pod głównego root.
sprawdzić czy się poprawnie propagują do webcomponentów.


dynamiczny import który ładuje jakiś plik z definicją webcomponentu


api do obserwowania zmian w dom.
jak się pojawia nowy node i ten node jest webcomponentem, to uruchamiać autoładowanie

potrzebna będzie mapa do tłumaczenia nazwy komponentu na ściekę do definicji tego komponentu.




Definiowanie typów do takich webcomponentów...
https://coryrylan.com/blog/how-to-use-web-components-with-typescript-and-react




SSR

mikrousługa pełniąca rolę mikrofrontu

request -->
nazwa komponentu, oraz atrybuty. Serwer w odpowiedzi powinien wygenerować statyczny html reprezentujący ten komponent (plus początkowe dane potrzebne do włozenia do store ewentualnie)

mikrousługa powinna zwracać "manifest", czyli mapa z nazwą komponentu na odpowiadający plik js z definicją





typy TS
Jakaś usługa "generowania" definicji tych nowych niestandardowych komponentów.
Czyli, komenda w "website" spinającym wszystkie komponenty. Po jej odpaleniu, powinien pojawić się plik z definicjami tych komponentów. Ten plik powinien być komitowany.
https://coryrylan.com/blog/how-to-use-web-components-with-typescript-and-react

